In C++, there are several ways to initialize variables, each with its own syntax and behavior. Here are some examples:

1. Default Initialization:
    - Syntax: int x;
    - Example: int x; (x is default-initialized, value is indeterminate)
    - Note: This type of initialization is not recommended, as it can lead to undefined behavior.

2. Value Initialization:
    - Syntax: int x = value;
    - Example: int x = 5; (x is value-initialized with 5)
    - Note: This is the most common way to initialize variables.

3. Direct Initialization:
    - Syntax: int x(value);
    - Example: int x(5); (x is direct-initialized with 5)
    - Note: This syntax is often used for classes and structs.

4. Copy Initialization:
    - Syntax: int x = other;
    - Example: int x = y; (x is copy-initialized from y)
    - Note: This creates a copy of the value of y.

5. List Initialization (C++11 and later):
    - Syntax: int x {value}; or int x = {value};
    - Example: int x {5}; or int x = {5}; (x is list-initialized with 5)
    - Note: This syntax is used for initializing variables with a list of values (e.g., arrays, vectors).

6. Aggregate Initialization (for aggregates like arrays and structs):
    - Syntax: int arr[] = {value1, value2, ...}; or struct_name s = {value1, value2, ...};
    - Example: int arr[] = {1, 2, 3}; or Point p = {1, 2}; (assuming Point is a struct with two int members)
    - Note: This initializes the elements of an aggregate variable.

These are the main types of initialization in C++. Let me know if you have more questions!