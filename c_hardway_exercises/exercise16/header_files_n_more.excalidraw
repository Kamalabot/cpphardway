{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "_EKbBkYbfsCb6h134ap4U",
      "type": "text",
      "x": 1479.1972262284103,
      "y": -156.68988189697257,
      "width": 1165.0423062422926,
      "height": 1742.6778518676756,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 895288502,
      "version": 235,
      "versionNonce": 1510101098,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1718257299580,
      "link": null,
      "locked": false,
      "text": "What is there in the header files stdio.h\n\nprintf() This function is used to print the character, string, float, integer, octal and hexadecimal values onto the output screen\n\nscanf() This function is used to read a character, string, numeric data from keyboard.\n\ngetc() It reads character from file\n\ngets() It reads line from keyboard\n\ngetchar() It reads character from keyboard\n\nputs() It writes line to o/p screen\n\nputchar() It writes a character to screen\n\nclearerr() This function clears the error indicators\n\nf open() All file handling functions are defined in stdio.h header file\n\nf close() closes an opened file\n\ngetw() reads an integer from file\n\nputw() writes an integer to file\n\nf getc() reads a character from file\n\nputc() writes a character to file\n\nf putc() writes a character to file\n\nf gets() reads string from a file, one line at a time\n\nf puts() writes string to a file\n\nf eof() finds end of file\n\nf getchar reads a character from keyboard\n\nf getc() reads a character from file\n\nf printf() writes formatted data to a file\n\nf scanf() reads formatted data from a file\n\nf getchar reads a character from keyboard\n\nf putchar writes a character from keyboard\n\nf seek() moves file pointer position to given location\n\nSEEK_SET moves file pointer position to the beginning of the file\n\nSEEK_CUR moves file pointer position to given location\n\nSEEK_END moves file pointer position to the end of file.\n\nf tell() gives current position of file pointer\n\nrewind() moves file pointer position to the beginning of the file\n\nputc() writes a character to file\n\nsprint() writes formatted output to string\n\nsscanf() Reads formatted input from a string\n\nremove() deletes a file\n\nfflush() flushes a file",
      "fontSize": 21.343268240877837,
      "fontFamily": 2,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 1736.0000000000005,
      "containerId": null,
      "originalText": "What is there in the header files stdio.h\n\nprintf() This function is used to print the character, string, float, integer, octal and hexadecimal values onto the output screen\n\nscanf() This function is used to read a character, string, numeric data from keyboard.\n\ngetc() It reads character from file\n\ngets() It reads line from keyboard\n\ngetchar() It reads character from keyboard\n\nputs() It writes line to o/p screen\n\nputchar() It writes a character to screen\n\nclearerr() This function clears the error indicators\n\nf open() All file handling functions are defined in stdio.h header file\n\nf close() closes an opened file\n\ngetw() reads an integer from file\n\nputw() writes an integer to file\n\nf getc() reads a character from file\n\nputc() writes a character to file\n\nf putc() writes a character to file\n\nf gets() reads string from a file, one line at a time\n\nf puts() writes string to a file\n\nf eof() finds end of file\n\nf getchar reads a character from keyboard\n\nf getc() reads a character from file\n\nf printf() writes formatted data to a file\n\nf scanf() reads formatted data from a file\n\nf getchar reads a character from keyboard\n\nf putchar writes a character from keyboard\n\nf seek() moves file pointer position to given location\n\nSEEK_SET moves file pointer position to the beginning of the file\n\nSEEK_CUR moves file pointer position to given location\n\nSEEK_END moves file pointer position to the end of file.\n\nf tell() gives current position of file pointer\n\nrewind() moves file pointer position to the beginning of the file\n\nputc() writes a character to file\n\nsprint() writes formatted output to string\n\nsscanf() Reads formatted input from a string\n\nremove() deletes a file\n\nfflush() flushes a file",
      "lineHeight": 1.15
    },
    {
      "id": "DHzJR6j_Z6zr0YB3D-Txs",
      "type": "text",
      "x": 160.8332316080731,
      "y": -163.90841461994034,
      "width": 930.890625,
      "height": 160.99999999999997,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1093823146,
      "version": 208,
      "versionNonce": 311673322,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1718257073273,
      "link": null,
      "locked": false,
      "text": "What is there in assert.h?\n\ncontains assert() macro / function\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/basedefs/assert.h.html",
      "fontSize": 28,
      "fontFamily": 2,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 154,
      "containerId": null,
      "originalText": "What is there in assert.h?\n\ncontains assert() macro / function\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/basedefs/assert.h.html",
      "lineHeight": 1.15
    },
    {
      "id": "JiLZsROO5tj1O3XNecuKf",
      "type": "text",
      "x": 156.66666666666686,
      "y": 74.84158538005954,
      "width": 1030.1724853515625,
      "height": 1065.9902777777781,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1375124854,
      "version": 89,
      "versionNonce": 1780430518,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1718257311140,
      "link": null,
      "locked": false,
      "text": "what is in the stdlib.h?\nhttps://www.tutorialspoint.com/c_standard_library/stdlib_h.htm\n\nThe stdlib.h file is a header file in the C programming language that contains \ndeclarations for a number of general-purpose functions. These functions \ninclude functions for memory allocation, process control, conversions, and more.\n\nHere are some of the functions declared in stdlib.h:\nmalloc(): - Allocates a block of memory of the specified size.\nfree(): - Frees a block of memory that was previously\nallocated with malloc().\n\ncalloc(): - Allocates an array of the specified size and initializes\nall of the elements to zero.\nrealloc(): - Changes the size of a block of memory that was\npreviously allocated with malloc() or calloc().\n\nexit(): - Terminates the program.\nabort(): - Terminates the program abnormally.\nsystem(): - Executes a command in a shell.\nrand(): - Generates a random number.\nsrand(): - Seeds the random number generator.\natoi(): - Converts a string to an integer.\natol(): - Converts a string to a long integer.\natof(): - Converts a string to a floating-point number.\n\nThe stdlib.h file also contains a number of macros, such as NULL, \nEXIT_SUCCESS, and EXIT_FAILURE. These macros are used\nto define constants and to control the behavior of certain functions.\nThe stdlib.h file is a very important header file in the C programming\nlanguage. It contains declarations for a number of functions that are\nused in almost every C program.",
      "fontSize": 28.96712711352658,
      "fontFamily": 2,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 1058,
      "containerId": null,
      "originalText": "what is in the stdlib.h?\nhttps://www.tutorialspoint.com/c_standard_library/stdlib_h.htm\n\nThe stdlib.h file is a header file in the C programming language that contains \ndeclarations for a number of general-purpose functions. These functions \ninclude functions for memory allocation, process control, conversions, and more.\n\nHere are some of the functions declared in stdlib.h:\nmalloc(): - Allocates a block of memory of the specified size.\nfree(): - Frees a block of memory that was previously\nallocated with malloc().\n\ncalloc(): - Allocates an array of the specified size and initializes\nall of the elements to zero.\nrealloc(): - Changes the size of a block of memory that was\npreviously allocated with malloc() or calloc().\n\nexit(): - Terminates the program.\nabort(): - Terminates the program abnormally.\nsystem(): - Executes a command in a shell.\nrand(): - Generates a random number.\nsrand(): - Seeds the random number generator.\natoi(): - Converts a string to an integer.\natol(): - Converts a string to a long integer.\natof(): - Converts a string to a floating-point number.\n\nThe stdlib.h file also contains a number of macros, such as NULL, \nEXIT_SUCCESS, and EXIT_FAILURE. These macros are used\nto define constants and to control the behavior of certain functions.\nThe stdlib.h file is a very important header file in the C programming\nlanguage. It contains declarations for a number of functions that are\nused in almost every C program.",
      "lineHeight": 1.15
    },
    {
      "type": "text",
      "version": 224,
      "versionNonce": 181454890,
      "isDeleted": false,
      "id": "bXBruNsdTGVt2jIAkYiFW",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 165.33042399088538,
      "y": 1192.590984522854,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1139.6773681640625,
      "height": 999.365885416667,
      "seed": 574235062,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1718257325914,
      "link": null,
      "locked": false,
      "fontSize": 28.96712711352658,
      "fontFamily": 2,
      "text": "Wht is contained in string.h\nhttps://www.geeksforgeeks.org/c-library-string-h/\n\nThe string.h file is a header file in the C standard library that contains functions \nfor manipulating strings (arrays of characters). It is included in the program \nusing the #include preprocessor directive.\n\nThe string.h header file contains a number of functions for working with strings, including:\nstrlen() - Returns the length of a string.\nstrcpy() - Copies one string to another.\nstrcmp() - Compares two strings.\nstrcat() - Concatenates two strings.\nstrchr() - Finds the first occurrence of a character in a string.\nstrstr() - Finds the first occurrence of one string in another.\nstrtok() - Breaks a string into tokens.\n\nThese functions are used in a variety of ways to manipulate strings in C programs. \nFor example, the strlen() function can be used to determine the length of a \nstring before it is printed, and the strcpy() function can be used to copy a \nstring from one variable to another.\n\nIn addition to the functions listed above, the string.h header file also contains \na number of macros and type definitions. These macros and type definitions are \nused to support the functions in the header file.\n\nFor example, the NULL macro is used to represent a null pointer, and \nthe size_t type is used to represent the size of an object.\n\nThe string.h header file is an essential part of the \nC standard library, and it is used in a wide variety of C programs.",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Wht is contained in string.h\nhttps://www.geeksforgeeks.org/c-library-string-h/\n\nThe string.h file is a header file in the C standard library that contains functions \nfor manipulating strings (arrays of characters). It is included in the program \nusing the #include preprocessor directive.\n\nThe string.h header file contains a number of functions for working with strings, including:\nstrlen() - Returns the length of a string.\nstrcpy() - Copies one string to another.\nstrcmp() - Compares two strings.\nstrcat() - Concatenates two strings.\nstrchr() - Finds the first occurrence of a character in a string.\nstrstr() - Finds the first occurrence of one string in another.\nstrtok() - Breaks a string into tokens.\n\nThese functions are used in a variety of ways to manipulate strings in C programs. \nFor example, the strlen() function can be used to determine the length of a \nstring before it is printed, and the strcpy() function can be used to copy a \nstring from one variable to another.\n\nIn addition to the functions listed above, the string.h header file also contains \na number of macros and type definitions. These macros and type definitions are \nused to support the functions in the header file.\n\nFor example, the NULL macro is used to represent a null pointer, and \nthe size_t type is used to represent the size of an object.\n\nThe string.h header file is an essential part of the \nC standard library, and it is used in a wide variety of C programs.",
      "lineHeight": 1.15,
      "baseline": 992
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}